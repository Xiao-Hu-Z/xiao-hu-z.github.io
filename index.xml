<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xiaou Blog</title>
    <link>https://xiao-hu-z.github.io/</link>
    <description>Recent content on Xiaou Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 13 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://xiao-hu-z.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go——一文读懂sort排序</title>
      <link>https://xiao-hu-z.github.io/post/go/go-package%E4%B9%8Bsort/</link>
      <pubDate>Sat, 13 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go-package%E4%B9%8Bsort/</guid>
      <description>sort sort简化函数 直接使用sort.Sort函数对切片进行排序是比较繁琐的，sort包提供了简化函数，比如：sort.Ints、sort.F</description>
    </item>
    
    <item>
      <title>Go语言基础之切片</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%87%E7%89%87/</link>
      <pubDate>Fri, 12 Nov 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%88%87%E7%89%87/</guid>
      <description>定义 切片（Slice）是一个拥有相同类型元素的可变长度的序列。它是基于数组类型做的一层封装。它非常灵活，支持自动扩容。 切片是一个引用类型，它</description>
    </item>
    
    <item>
      <title>mysql——常用指令</title>
      <link>https://xiao-hu-z.github.io/post/mysql/mysql%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 12 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/mysql/mysql%E6%8C%87%E4%BB%A4/</guid>
      <description>DML DML（data manipulation language）数据操纵语言，如：SELECT、UPDATE、INSERT、DELETE。 主要用来对数据库的数据进行一</description>
    </item>
    
    <item>
      <title>Go语言——字符串遍历</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86/</link>
      <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%81%8D%E5%8E%86/</guid>
      <description>字符串遍历 在go语言中支持两个字符类型，一个是byte(实际上是uint8的别名)，代表UTF-8字符串的单个字节的值，另一个是rune（为</description>
    </item>
    
    <item>
      <title>linux——压缩与打包</title>
      <link>https://xiao-hu-z.github.io/post/linux/linux%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85/</link>
      <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/linux/linux%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85/</guid>
      <description>tar压缩与解压 压缩文件名 Linux 底下有很多压缩文件名，常见的如下： 扩展名 压缩程序 *.Z compress *.zip zip *.gz gzip *.bz2 bzip2 *.xz xz *.tar tar 程序打包的数据，没有经过压缩 *.tar.gz tar 程序打包</description>
    </item>
    
    <item>
      <title>Go实现set</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E5%AE%9E%E7%8E%B0set/</link>
      <pubDate>Tue, 09 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E5%AE%9E%E7%8E%B0set/</guid>
      <description>set 使用map实现set 在Golang中通常使用map来实现set，map中的key为唯一值，这与set的特性一致。 简单实现，如下： set := make(map[string]bool) // New</description>
    </item>
    
    <item>
      <title>linux——diff命令解析</title>
      <link>https://xiao-hu-z.github.io/post/linux/linuxdiff%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/linux/linuxdiff%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</guid>
      <description>diff命令 Linux diff 命令用于比较文件的差异。 diff 以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则 diff 会比较目录中相同文件名的文件，但不会比</description>
    </item>
    
    <item>
      <title>Go语言基础之内联结构体</title>
      <link>https://xiao-hu-z.github.io/post/go/golang-%E5%86%85%E8%81%94%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Thu, 04 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/golang-%E5%86%85%E8%81%94%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>Struct embeding golang 中没有继承，但是其结构体内联的方式和继承很像，掌握内联结构体，实现面向对象 小王是一个很棒的strcut，他有一个field叫lengt</description>
    </item>
    
    <item>
      <title>mutex的架构演变</title>
      <link>https://xiao-hu-z.github.io/post/%E5%B9%B6%E5%8F%91/mutex%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</link>
      <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/%E5%B9%B6%E5%8F%91/mutex%E7%9A%84%E6%9E%B6%E6%9E%84%E6%BC%94%E5%8F%98/</guid>
      <description>mutex的架构演变 初版mutex：使用flag表示锁是否被持有 给新人机会：为照顾新来的goroutine，会让新来的goroutine尽可</description>
    </item>
    
    <item>
      <title>Go语言基础之流程控制</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 21 Oct 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>if else(分支结构) Go语言中if条件判断的格式如下： if 表达式1 { 分支1 } else if 表达式2 { 分支2 } else{ 分支3 } for(循环结构) or循环的基本</description>
    </item>
    
    <item>
      <title>ral</title>
      <link>https://xiao-hu-z.github.io/post/baidu/ral/</link>
      <pubDate>Tue, 19 Oct 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/baidu/ral/</guid>
      <description>概述 RAL，全称为 Resource Access Layer ，是 ODP（Online Development Platform，在线业务开发平台，面向全百度的在线业务支撑平台） 的资源访问层，以 PHP 扩展的</description>
    </item>
    
    <item>
      <title>MVC架构</title>
      <link>https://xiao-hu-z.github.io/post/mvc%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 19 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/mvc%E6%9E%B6%E6%9E%84/</guid>
      <description>MVC即Model、View、Controller即模型、视图、控制器 MVC要实现的目标是将软件用户界面和业务逻辑分离以使代码可扩展性、可复</description>
    </item>
    
    <item>
      <title>Go语言基础之init函数</title>
      <link>https://xiao-hu-z.github.io/post/go/goinit%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/goinit%E5%87%BD%E6%95%B0/</guid>
      <description>Go init函数 作用 init()函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。init 函数通常被用来： 初始化不能采用初始</description>
    </item>
    
    <item>
      <title>Go语言基础之返回指针与返回值的区别</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%88%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%88%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>package main import &amp;#34;fmt&amp;#34; type A map[int]string type B struct { A c int } func main() { b := B{make(A), 10} NewB := func() *B { return &amp;amp;b } c := NewB() c.c = 100 c.A[1] = &amp;#34;3&amp;#34; fmt.Println(b, c) } //{map[1:3] 100} &amp;amp;{map[1:3] 100} func main() { a := B{make(A), 10} b := B{make(A), 10} NewB := func() B { return b } c := NewB() c.c =</description>
    </item>
    
    <item>
      <title>linux——sed命令解析</title>
      <link>https://xiao-hu-z.github.io/post/linux/linuxsed%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 11 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/linux/linuxsed%E5%91%BD%E4%BB%A4%E8%A7%A3%E6%9E%90/</guid>
      <description>sed介绍 sed 全名为 stream editor，流编辑器，用程序的方式来编辑文本，功能相当的强大。是贝尔实验室的 Lee E.McMahon 在 1973 年到 1974 年之间开发完成，目前可以在大</description>
    </item>
    
    <item>
      <title>Helm介绍</title>
      <link>https://xiao-hu-z.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Sat, 09 Oct 2021 11:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel</description>
    </item>
    
    <item>
      <title>git &amp; icode</title>
      <link>https://xiao-hu-z.github.io/post/git/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/git/</guid>
      <description>Git Git的相关术语 工作区（workspace） 程序员进行开发改动的地方，是你当前看到的，也是最新的。平常我们开发就是拷贝远程仓库中的一个分支</description>
    </item>
    
    <item>
      <title>http状态码</title>
      <link>https://xiao-hu-z.github.io/post/wangluo/http%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/wangluo/http%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>HTTP状态码(HTTP Status Code)是用以表示网页服务器超文本传输协议响应状态的3位数字代码。尤其是在 RESTful 大行当道的现在，并不建议使用业务封装</description>
    </item>
    
    <item>
      <title>分类</title>
      <link>https://xiao-hu-z.github.io/category/</link>
      <pubDate>Sun, 26 Sep 2021 17:07:33 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/category/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Go语言基础之map</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</guid>
      <description>概述 Go语言中的map(映射、字典)是一种内置的数据结构，它是一个无序的键值对(key:value)集合，底层采用哈希表来实现。 字声明和初始</description>
    </item>
    
    <item>
      <title>Go语言基础之type</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</guid>
      <description>定义结构体类型 结构体可用于用户自定义数据类型和进行面向对象编程。 type Person struct { name string age int sex bool } func (p *Person)Eat(){ fmt.Printf(&amp;#34;%s爱吃西红柿炒</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://xiao-hu-z.github.io/about/</link>
      <pubDate>Sun, 20 Oct 2019 17:14:25 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/about/</guid>
      <description>The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination. —— Xiaohu Zhao</description>
    </item>
    
    <item>
      <title>标签</title>
      <link>https://xiao-hu-z.github.io/tags/</link>
      <pubDate>Sun, 20 Oct 2019 17:12:25 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/tags/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiao-hu-z.github.io/search/placeholder/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/search/placeholder/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiao-hu-z.github.io/top/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/top/about/</guid>
      <description>The programmer, like the poet, works only slightly removed from pure thought-stuff. He builds his castles in the air, from air, creating by exertion of the imagination.
—— Xiaohu Zhao</description>
    </item>
    
    <item>
      <title></title>
      <link>https://xiao-hu-z.github.io/top/books/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/top/books/</guid>
      <description>Machine learning学习笔记 Coursera 在线课程 Machine learning 笔记 讲师: 吴恩达(Andrew Ng) 课程地址：https://www.coursera.org/lear</description>
    </item>
    
    <item>
      <title>Posts Archive</title>
      <link>https://xiao-hu-z.github.io/top/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/top/archive/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
