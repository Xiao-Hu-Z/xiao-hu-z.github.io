<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Xiaou Blog</title>
    <link>https://xiao-hu-z.github.io/post/</link>
    <description>Recent content in Posts on Xiaou Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Oct 2021 11:00:00 +0000</lastBuildDate><atom:link href="https://xiao-hu-z.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helm介绍</title>
      <link>https://xiao-hu-z.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</link>
      <pubDate>Sat, 09 Oct 2021 11:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/2018/04/16/using-helm-to-deploy-to-kubernetes/</guid>
      <description>前言 Helm是Kubernetes生态系统中的一个软件包管理工具。本文将介绍为何要使用Helm进行Kubernetes软件包管理，澄清Hel</description>
    </item>
    
    <item>
      <title>http状态码</title>
      <link>https://xiao-hu-z.github.io/post/wangluo/http%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Sat, 09 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/wangluo/http%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>HTTP状态码**(HTTP Status Code)是用以表示网页服务器超文本传输协议响应状态的3位数字代码。尤其是在 RESTful 大行当道的现在，并不建议使用业务</description>
    </item>
    
    <item>
      <title>Go语言基础之map</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</guid>
      <description>概述 Go语言中的map(映射、字典)是一种内置的数据结构，它是一个无序的键值对(key:value)集合，底层采用哈希表来实现。 字声明和初始</description>
    </item>
    
    <item>
      <title>Go语言基础之type</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</guid>
      <description>定义结构体类型 结构体可用于用户自定义数据类型和进行面向对象编程。 type Person struct { name string age int sex bool } func (p *Person)Eat(){ fmt.Printf(&amp;#34;%s爱吃西红柿炒</description>
    </item>
    
  </channel>
</rss>
