<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Xiaou Blog</title>
    <link>https://xiao-hu-z.github.io/tags/go/</link>
    <description>Recent content in Go on Xiaou Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 21 Oct 2021 11:07:01 +0800</lastBuildDate><atom:link href="https://xiao-hu-z.github.io/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Go语言基础之流程控制</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Thu, 21 Oct 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description>if else(分支结构) Go语言中if条件判断的格式如下： if 表达式1 { 分支1 } else if 表达式2 { 分支2 } else{ 分支3 } for(循环结构) or循环的基本</description>
    </item>
    
    <item>
      <title>Go语言基础之init函数</title>
      <link>https://xiao-hu-z.github.io/post/go/goinit%E5%87%BD%E6%95%B0/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/goinit%E5%87%BD%E6%95%B0/</guid>
      <description>Go init函数 作用 init()函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。init 函数通常被用来： 初始化不能采用初始</description>
    </item>
    
    <item>
      <title>Go语言基础之返回指针与返回值的区别</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%88%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%BF%94%E5%9B%9E%E6%8C%87%E9%92%88%E4%B8%8E%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>package main import &amp;#34;fmt&amp;#34; type A map[int]string type B struct { A c int } func main() { b := B{make(A), 10} NewB := func() *B { return &amp;amp;b } c := NewB() c.c = 100 c.A[1] = &amp;#34;3&amp;#34; fmt.Println(b, c) } //{map[1:3] 100} &amp;amp;{map[1:3] 100} func main() { a := B{make(A), 10} b := B{make(A), 10} NewB := func() B { return b } c := NewB() c.c =</description>
    </item>
    
    <item>
      <title>Go语言基础之map</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Bmap/</guid>
      <description>概述 Go语言中的map(映射、字典)是一种内置的数据结构，它是一个无序的键值对(key:value)集合，底层采用哈希表来实现。 字声明和初始</description>
    </item>
    
    <item>
      <title>Go语言基础之type</title>
      <link>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</link>
      <pubDate>Sun, 26 Sep 2021 11:07:01 +0800</pubDate>
      
      <guid>https://xiao-hu-z.github.io/post/go/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8Btype/</guid>
      <description>定义结构体类型 结构体可用于用户自定义数据类型和进行面向对象编程。 type Person struct { name string age int sex bool } func (p *Person)Eat(){ fmt.Printf(&amp;#34;%s爱吃西红柿炒</description>
    </item>
    
    <item>
      <title>标签</title>
      <link>https://xiao-hu-z.github.io/tags/</link>
      <pubDate>Sun, 20 Oct 2019 17:12:25 +0000</pubDate>
      
      <guid>https://xiao-hu-z.github.io/tags/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
